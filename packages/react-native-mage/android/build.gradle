buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"


def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Pyjsi_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Pyjsi_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  if (major == 7 && minor >= 3) {
    return true
  }

  return major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.pyjsi"
  } else {
    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestDeprecated.xml"
      }
    }
  }

  buildFeatures {
    prefab true
  }


  ndkVersion getExtOrDefault("ndkVersion")
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
//        abiFilters "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
        abiFilters "arm64-v8a"
        arguments "-DPROJ_DIR=${projectDir}", "-DANDROID_STL=c++_shared"
      }
    }
  }
  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }
  packagingOptions {
    excludes = [
      "**/libjsi.so",
      "**/libc++_shared.so"
    ]
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }



}

repositories {
  mavenCentral()
  google()
}


dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-android:+'
  // simple jtar lib for extracting assets
  api 'org.kamranzafar:jtar:2.3'
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "Pyjsi"
    codegenJavaPackageName = "com.pyjsi"
  }
}


task copyNativeLibs(type: Copy) {
  from("../externals") {
    include "**/lib/lib.*.so"
  }

  into file("src/main/jniLibs")
  includeEmptyDirs = false

  eachFile { fileDetails ->
    def pathSplit = fileDetails.path.split("/")
    def targetDir = pathSplit[pathSplit.length - 3] // this should be the directory name (arch type)
    fileDetails.path = "$targetDir/" + fileDetails.name
  }

  doLast {
    println("Copied native libraries to jniLibs directory.")
  }
}


preBuild.dependsOn copyNativeLibs
